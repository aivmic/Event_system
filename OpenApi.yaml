openapi: 3.0.1
info:
  title: My API
  version: v1
paths:
  /api/categories:
    get:
      summary: Get all categories
      tags:
        - Event_system
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'
              example:
                - id: 1
                  name: Music
                  description: Music events
                - id: 2
                  name: Sports
                  description: Sports events
        '400':
          description: Bad request
        '500':
          description: Internal server error
    post:
      description: Create a new category
      tags:
        - category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryDto'
            example:
              name: "Music"
              description: "Music events and concerts"
        required: true
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
              example:
                id: 1
                name: "Music"
                description: "Music events and concerts"
        '400':
          description: Invalid input data
          content:
            application/json:
              example:
                message: "Bad request due to validation errors"
        '422':
          description: Unprocessable entity - validation failed
          content:
            application/json:
              example:
                errors:
                  name: "Name is required and must be between 3 and 50 characters"
                  description: "Description must be between 5 and 200 characters"

  '/api/categories/{categoryId}':
    get:
      tags:
        - category
      summary: Get category by ID
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Category details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
              example:
                id: 1
                name: "Music"
                description: "Music events and concerts"
        '404':
          description: Category not found
    put:
      tags:
        - category
      summary: Update a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryDto'
            example:
              description: "Updated description for music events"
        required: true
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '404':
          description: Category not found
        '400':
          description: Invalid input data
    delete:
      tags:
        - category
      summary: Delete a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Category deleted successfully
        '404':
          description: Category not found

  '/api/categories/{categoryId}/events':
    get:
      tags:
        - event
      summary: Get all events for a category
      responses:
        '200':
          description: A list of events for the category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDto'
              example:
                - id: 1
                  title: "Concert"
                  description: "A live music concert"
                  startDate: "2024-10-01T19:00:00Z"
                  endDate: "2024-10-01T22:00:00Z"
                  price: 50.00
                - id: 2
                  title: "Festival"
                  description: "An outdoor music festival"
                  startDate: "2024-10-05T12:00:00Z"
                  endDate: "2024-10-05T23:00:00Z"
                  price: 75.00
        '404':
          description: Category not found
    post:
      tags:
        - event
      summary: Create a new event in a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventDto'
            example:
              title: "Concert"
              description: "A live music concert"
              startDate: "2024-10-01T19:00:00Z"
              endDate: "2024-10-01T22:00:00Z"
              price: 50.00
        required: true
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDto'
        '404':
          description: Category not found
        '400':
          description: Invalid input data

  '/api/categories/{categoryId}/events/{eventId}':
    get:
      tags:
        - event
      summary: Get event by ID for a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Event details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDto'
              example:
                id: 1
                title: "Concert"
                description: "A live music concert"
                startDate: "2024-10-01T19:00:00Z"
                endDate: "2024-10-01T22:00:00Z"
                price: 50.00
        '404':
          description: Event not found

  '/api/categories/{categoryId}/events/{eventId}/ratings':
    get:
      tags:
        - rating
      summary: Get all ratings for an event
      responses:
        '200':
          description: A list of ratings for the event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RatingDto'
              example:
                - id: 1
                  stars: 5
                - id: 2
                  stars: 4
        '404':
          description: Event not found
    post:
      tags:
        - rating
      summary: Add a rating to an event
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRatingDto'
            example:
              stars: 5
        required: true
      responses:
        '201':
          description: Rating created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDto'
        '404':
          description: Event not found
          
components:
  schemas:
    CategoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          example: Music
        description:
          type: string
          example: "Music events"
      required:
        - name
        - description

    CreateCategoryDto:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: "Music"
        description:
          type: string
          minLength: 5
          maxLength: 200
          example: "Events related to music"
      required:
        - name
        - description

    UpdateCategoryDto:
      type: object
      properties:
        description:
          type: string
          minLength: 5
          maxLength: 200
          example: "Updated description for category"
      required:
        - description

    EventDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        price:
          type: number
          format: decimal
      required:
        - title
        - description
        - startDate
        - endDate
        - price

    CreateEventDto:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 50
          example: "Concert"
        description:
          type: string
          minLength: 5
          maxLength: 200
          example: "A live music concert"
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        price:
          type: number
          format: decimal
      required:
        - title
        - description
        - startDate
        - endDate
        - price

    UpdateEventDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          minLength: 5
          maxLength: 200
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        price:
          type: number
          format: decimal
        categoryId:
          type: integer
          format: int32
      required:
        - title
        - description
        - startDate
        - endDate
        - price
        - categoryId

    RatingDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        stars:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
      required:
        - stars

    CreateRatingDto:
      type: object
      properties:
        stars:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
      required:
        - stars

    UpdateRatingDto:
      type: object
      properties:
        stars:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
      required:
        - stars

  responses:
    singleTopic:
      description: A category
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: "#/components/schemas/topic"
          example:
            - id: 1
              title: "OpenAPI Best Practices"
              description: "Discussion about best practices when using OpenAPI"
    unprocessableEntity:
      description: Unprocessable entity response
      content:
        application/problem+json:
          schema:
            type: object
            items:
              $ref: "#/components/schemas/problemDetails"
          example:
            type: "https://tools.ietf.org/html/rfc4918#section-11.2"
            title: "Unprocessable Entity"
            status: 422
            errors:
              Name:
                - "'Name' must not be empty."